<?php

{{>info}}

namespace {{apiPackageNamespace}};

use Illuminate\Http\Request;
use Illuminate\Routing\Controller as BaseController;

{{#operations}}abstract class {{classname}} extends BaseController
{
    {{#operation}}
    /**
     * Operation {{{operationId}}}
     * Path: {{{path}}}
{{#summary}}
     *
     * {{{summary}}}
{{/summary}}
{{#notes}}
     *
     * {{{notes}}}
{{/notes}}
     *
  {{#pathParams}}   * @param {{dataType}} ${{paramName}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}} {{description}} 
  {{/pathParams}}   * @return \Illuminate\Http\Response
  {{#isDeprecated}}
     * @deprecated
  {{/isDeprecated}}
     */
    public function {{operationId}}(Request $request{{#hasPathParams}}, {{#pathParams}}${{paramName}}{{^-last}}, {{/-last}}{{/pathParams}}{{/hasPathParams}}) {
        return response('How about implementing {{nickname}} as a {{httpMethod}} method?');
    }

    protected function validate{{operationIdCamelCase}}(Request &$request{{#hasPathParams}}, {{#pathParams}}&${{paramName}}{{^-last}}, {{/-last}}{{/pathParams}}{{/hasPathParams}}) {
        {{#allParams}}
        {{^isBodyParam}}

        // {{paramName}} validation
        if(!{{#isPathParam}}isset(${{paramName}}){{/isPathParam}}{{^isPathParam}}$request->has('{{paramName}}'){{/isPathParam}}) {
            {{#required}}
            throw new \InvalidArgumentException('Missing the required parameter {{paramName}} when calling {{implClassname}}.{{operationId}}.');
            {{/required}}
            {{^required}}
            $request->merge(['{{paramName}}' => {{defaultValue}}]);
            {{/required}}
        } else {
            {{#isInteger}}
            {{#isPathParam}}
            if(ctype_digit(${{paramName}})) {
                ${{paramName}} = (int) ${{paramName}};
            {{/isPathParam}}
            {{^isPathParam}}
            if(ctype_digit($request->input('{{paramName}}'))) {
                $request->merge(['{{paramName}}' => (int) $request->input('{{paramName}}')]);
            {{/isPathParam}}
            } else {
                throw new \InvalidArgumentException('Invalid characters in parameter {{paramName}} of type integer when calling {{implClassname}}.{{operationId}}.');
            }

            {{/isInteger}}
            {{#maxLength}}
            if(strlen(${{^isPathParam}}request->input('{{/isPathParam}}{{paramName}}{{^isPathParam}}'){{/isPathParam}}) > {{maxLength}}) {
                throw new \InvalidArgumentException('Invalid length for {{paramName}} when calling {{implClassname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
            }
            {{/maxLength}}
            {{#minLength}}
            if(strlen(${{^isPathParam}}request->input('{{/isPathParam}}{{paramName}}{{^isPathParam}}'){{/isPathParam}}) < {{minLength}}) {
                throw new \InvalidArgumentException('Invalid length for {{paramName}} when calling {{implClassname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
            }
            {{/minLength}}
            {{#maximum}}
            if(${{^isPathParam}}request->input('{{/isPathParam}}{{paramName}}{{^isPathParam}}'){{/isPathParam}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
                throw new \InvalidArgumentException('Invalid value for {{paramName}} when calling {{implClassname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.');
            }
            {{/maximum}}
            {{#minimum}}
            if(${{^isPathParam}}request->input('{{/isPathParam}}{{paramName}}{{^isPathParam}}'){{/isPathParam}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
                throw new \InvalidArgumentException('Invalid value for {{paramName}} when calling {{implClassname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
            }
            {{/minimum}}
            {{#pattern}}
            if(!preg_match("{{{pattern}}}", ${{^isPathParam}}request->input('{{/isPathParam}}{{paramName}}{{^isPathParam}}'){{/isPathParam}})) {
                throw new \InvalidArgumentException('Invalid value for {{paramName}} when calling {{implClassname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.');
            }
            {{/pattern}}
        }
        {{/isBodyParam}}
        {{/allParams}}
    }

    {{/operation}}
}
{{/operations}}
